{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Geobay","text":"<p>python package for geog 510</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://Caseyshea96.github.io/GeoBay</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>```{python} import geobay</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Caseyshea96/geoproject510/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>GeoProject510 could always use more documentation, whether as part of the official GeoProject510 docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Caseyshea96/geoproject510/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geoproject510 for local development.</p> <ol> <li> <p>Fork the geoproject510 repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geoproject510.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geoproject510\n$ cd geoproject510/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geoproject510 tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/Caseyshea96/geoproject510/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":""},{"location":"foliumap/#GeoBay.foliumap.FoliumMap","title":"<code>FoliumMap</code>","text":"Source code in <code>GeoBay\\foliumap.py</code> <pre><code>class FoliumMap:\n    def __init__(self, location, zoom_start=3, **kwargs):\n        \"\"\"\n        Initializes a folium map centered at a given location with a specified zoom level.\n\n        Parameters:\n        location (tuple): Latitude and longitude coordinates for the map center.\n        zoom_start (int): The initial zoom level of the map.\n        \"\"\"\n        self.map = folium.Map(location=location, zoom_start=zoom_start, **kwargs)\n\n    def add_basemap(self, basemap='OpenStreetMap'):\n        \"\"\"\n        Adds a basemap to the folium map.\n\n        Parameters:\n        basemap (str): The name of the basemap to add (e.g., 'OpenStreetMap', 'Stamen Terrain', etc.).\n        \"\"\"\n        basemaps = {\n            'OpenStreetMap': 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n            'Stamen Terrain': 'http://{s}.tile.stamen.com/terrain/{z}/{x}/{y}.jpg',\n            'Esri WorldImagery': 'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'\n        }\n        folium.TileLayer(tiles=basemaps.get(basemap, basemaps['OpenStreetMap']), attr=basemap).add_to(self.map)\n\n    def add_layer_control(self):\n        \"\"\"\n        Adds a layer control widget to the folium map for toggling layers.\n        \"\"\"\n        folium.LayerControl().add_to(self.map)\n\n    def add_vector(self, geo_data):\n        \"\"\"\n        Adds vector data (GeoJSON or other formats supported by GeoPandas) to the map.\n\n        Parameters:\n        geo_data (GeoDataFrame or str): A GeoDataFrame or a path to a GeoJSON file.\n        \"\"\"\n        if isinstance(geo_data, gpd.GeoDataFrame):\n            geo_data = geo_data.to_json()\n        folium.GeoJson(geo_data).add_to(self.map)\n\n    def add_split_map(self, left_layer='OpenStreetMap', right_layer='Stamen Terrain'):\n        \"\"\"\n        Adds a side-by-side split view of two different tile layers.\n\n        Parameters:\n        left_layer (str): Basemap name for the left side.\n        right_layer (str): Basemap name for the right side.\n        \"\"\"\n        # Define the basemap options\n        basemaps = {\n            'OpenStreetMap': folium.TileLayer(\n                tiles='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n                name='OpenStreetMap', attr='OpenStreetMap'\n            ),\n            'Stamen Terrain': folium.TileLayer(\n                tiles='http://{s}.tile.stamen.com/terrain/{z}/{x}/{y}.jpg',\n                name='Stamen Terrain', attr='Stamen Terrain'\n            ),\n            'Esri WorldImagery': folium.TileLayer(\n                tiles='http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n                name='Esri WorldImagery', attr='Esri WorldImagery'\n            )\n        }\n\n        # Get the left and right basemaps\n        left = basemaps.get(left_layer, basemaps['OpenStreetMap'])\n        right = basemaps.get(right_layer, basemaps['Stamen Terrain'])\n\n        # Add the layers to the map\n        left.add_to(self.map)\n        right.add_to(self.map)\n\n        # Add the side-by-side split functionality\n        side_by_side = SideBySideLayers(left, right)\n        side_by_side.add_to(self.map)\n\n    def show_map(self):\n        \"\"\"\n        Displays the folium map in the Jupyter notebook or Python script.\n        \"\"\"\n        return self.map\n</code></pre>"},{"location":"foliumap/#GeoBay.foliumap.FoliumMap.__init__","title":"<code>__init__(location, zoom_start=3, **kwargs)</code>","text":"<p>Initializes a folium map centered at a given location with a specified zoom level.</p> <p>Parameters: location (tuple): Latitude and longitude coordinates for the map center. zoom_start (int): The initial zoom level of the map.</p> Source code in <code>GeoBay\\foliumap.py</code> <pre><code>def __init__(self, location, zoom_start=3, **kwargs):\n    \"\"\"\n    Initializes a folium map centered at a given location with a specified zoom level.\n\n    Parameters:\n    location (tuple): Latitude and longitude coordinates for the map center.\n    zoom_start (int): The initial zoom level of the map.\n    \"\"\"\n    self.map = folium.Map(location=location, zoom_start=zoom_start, **kwargs)\n</code></pre>"},{"location":"foliumap/#GeoBay.foliumap.FoliumMap.add_basemap","title":"<code>add_basemap(basemap='OpenStreetMap')</code>","text":"<p>Adds a basemap to the folium map.</p> <p>Parameters: basemap (str): The name of the basemap to add (e.g., 'OpenStreetMap', 'Stamen Terrain', etc.).</p> Source code in <code>GeoBay\\foliumap.py</code> <pre><code>def add_basemap(self, basemap='OpenStreetMap'):\n    \"\"\"\n    Adds a basemap to the folium map.\n\n    Parameters:\n    basemap (str): The name of the basemap to add (e.g., 'OpenStreetMap', 'Stamen Terrain', etc.).\n    \"\"\"\n    basemaps = {\n        'OpenStreetMap': 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n        'Stamen Terrain': 'http://{s}.tile.stamen.com/terrain/{z}/{x}/{y}.jpg',\n        'Esri WorldImagery': 'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'\n    }\n    folium.TileLayer(tiles=basemaps.get(basemap, basemaps['OpenStreetMap']), attr=basemap).add_to(self.map)\n</code></pre>"},{"location":"foliumap/#GeoBay.foliumap.FoliumMap.add_layer_control","title":"<code>add_layer_control()</code>","text":"<p>Adds a layer control widget to the folium map for toggling layers.</p> Source code in <code>GeoBay\\foliumap.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"\n    Adds a layer control widget to the folium map for toggling layers.\n    \"\"\"\n    folium.LayerControl().add_to(self.map)\n</code></pre>"},{"location":"foliumap/#GeoBay.foliumap.FoliumMap.add_split_map","title":"<code>add_split_map(left_layer='OpenStreetMap', right_layer='Stamen Terrain')</code>","text":"<p>Adds a side-by-side split view of two different tile layers.</p> <p>Parameters: left_layer (str): Basemap name for the left side. right_layer (str): Basemap name for the right side.</p> Source code in <code>GeoBay\\foliumap.py</code> <pre><code>def add_split_map(self, left_layer='OpenStreetMap', right_layer='Stamen Terrain'):\n    \"\"\"\n    Adds a side-by-side split view of two different tile layers.\n\n    Parameters:\n    left_layer (str): Basemap name for the left side.\n    right_layer (str): Basemap name for the right side.\n    \"\"\"\n    # Define the basemap options\n    basemaps = {\n        'OpenStreetMap': folium.TileLayer(\n            tiles='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n            name='OpenStreetMap', attr='OpenStreetMap'\n        ),\n        'Stamen Terrain': folium.TileLayer(\n            tiles='http://{s}.tile.stamen.com/terrain/{z}/{x}/{y}.jpg',\n            name='Stamen Terrain', attr='Stamen Terrain'\n        ),\n        'Esri WorldImagery': folium.TileLayer(\n            tiles='http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n            name='Esri WorldImagery', attr='Esri WorldImagery'\n        )\n    }\n\n    # Get the left and right basemaps\n    left = basemaps.get(left_layer, basemaps['OpenStreetMap'])\n    right = basemaps.get(right_layer, basemaps['Stamen Terrain'])\n\n    # Add the layers to the map\n    left.add_to(self.map)\n    right.add_to(self.map)\n\n    # Add the side-by-side split functionality\n    side_by_side = SideBySideLayers(left, right)\n    side_by_side.add_to(self.map)\n</code></pre>"},{"location":"foliumap/#GeoBay.foliumap.FoliumMap.add_vector","title":"<code>add_vector(geo_data)</code>","text":"<p>Adds vector data (GeoJSON or other formats supported by GeoPandas) to the map.</p> <p>Parameters: geo_data (GeoDataFrame or str): A GeoDataFrame or a path to a GeoJSON file.</p> Source code in <code>GeoBay\\foliumap.py</code> <pre><code>def add_vector(self, geo_data):\n    \"\"\"\n    Adds vector data (GeoJSON or other formats supported by GeoPandas) to the map.\n\n    Parameters:\n    geo_data (GeoDataFrame or str): A GeoDataFrame or a path to a GeoJSON file.\n    \"\"\"\n    if isinstance(geo_data, gpd.GeoDataFrame):\n        geo_data = geo_data.to_json()\n    folium.GeoJson(geo_data).add_to(self.map)\n</code></pre>"},{"location":"foliumap/#GeoBay.foliumap.FoliumMap.show_map","title":"<code>show_map()</code>","text":"<p>Displays the folium map in the Jupyter notebook or Python script.</p> Source code in <code>GeoBay\\foliumap.py</code> <pre><code>def show_map(self):\n    \"\"\"\n    Displays the folium map in the Jupyter notebook or Python script.\n    \"\"\"\n    return self.map\n</code></pre>"},{"location":"geobay/","title":"GeoBay module","text":""},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap","title":"<code>CustomIpyleafletMap</code>","text":"<p>               Bases: <code>Map</code></p> <p>A custom wrapper around ipyleaflet.Map with additional helper methods for adding basemaps, vector data, raster layers, images, videos, and WMS layers.</p> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>class CustomIpyleafletMap(IpyleafletMap):\n    \"\"\"\n    A custom wrapper around ipyleaflet.Map with additional helper methods\n    for adding basemaps, vector data, raster layers, images, videos, and WMS layers.\n    \"\"\"\n\n    def __init__(self, center, zoom=12, **kwargs):\n        \"\"\"\n        Initialize the custom map.\n\n        Args:\n            center (tuple): Latitude and longitude of the map center.\n            zoom (int, optional): Zoom level of the map. Defaults to 12.\n            **kwargs: Additional keyword arguments for ipyleaflet.Map.\n        \"\"\"\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n    def add_basemap(self, basemap_name: str):\n        \"\"\"\n        Add a basemap layer to the map.\n\n        Args:\n            basemap_name (str): Name of the basemap ('OpenStreetMap', 'Esri.WorldImagery', or 'OpenTopoMap').\n\n        Raises:\n            ValueError: If the basemap name is not supported.\n        \"\"\"\n        basemap_urls = {\n            \"OpenStreetMap\": \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            \"Esri.WorldImagery\": \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n            \"OpenTopoMap\": \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\n        }\n\n        if basemap_name not in basemap_urls:\n            raise ValueError(f\"Basemap '{basemap_name}' is not supported.\")\n\n        basemap = TileLayer(url=basemap_urls[basemap_name])\n        self.add_layer(basemap)\n\n    def add_basemap_gui(self, options=None, position=\"topright\"):    \n        \"\"\"\n        Adds a graphical user interface (GUI) for selecting basemaps.\n\n        Args:\n            -options (list, optional): A list of basemap options to display in the dropdown.\n               [\"OpenStreetMap.Mapnik\", \"OpenTopoMap\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"].\n            -position (str, optional): The position of the widget on the map. Defaults to \"topright\".\n\n        Behavior:\n            - A toggle button is used to show or hide the dropdown and close button.\n            - The dropdown allows users to select a bsemap from the provided options.\n            - The close button hides the widget from the map.\n\n        Event Handlers:\n            - `on_toggle_change`: Toggles the visibility of the dropdown and close button.\n            - `on_button_click`: Closes the widget when button is clicked\n            - `on_dropdown_change`: Updates the basemap when a new option is selected.\n        \"\"\"\n        if options is None:\n            options = [\n                \"OpenStreetMap.Mapnik\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"CartoDB.DarkMatter\",\n            ]\n\n        toggle = widgets.ToggleButton(\n            value=True,\n            button_style=\"\",\n            tooltip=\"Click me\",\n            icon=\"map\",\n        )\n        toggle.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n        dropdown = widgets.Dropdown(\n            options=options,\n            value=options[0],\n            description=\"Basemap:\",\n            style={\"description_width\": \"initial\"},\n        )\n        dropdown.layout = widgets.Layout(width=\"250px\", height=\"38px\")\n\n        button = widgets.Button(\n            icon=\"times\",\n        )\n        button.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n        hbox = widgets.HBox([toggle, dropdown, button])\n\n        def on_toggle_change(change):\n            if change[\"new\"]:\n                hbox.children = [toggle, dropdown, button]\n            else:\n                hbox.children = [toggle]\n\n        toggle.observe(on_toggle_change, names=\"value\")\n\n        def on_button_click(b):\n            hbox.close()\n            toggle.close()\n            dropdown.close()\n            button.close()\n\n        button.on_click(on_button_click)\n\n        def on_dropdown_change(change):\n            if change[\"new\"]:\n                self.layers = self.layers[:-2]\n                self.add_basemap(change[\"new\"])\n\n        dropdown.observe(on_dropdown_change, names=\"value\")\n\n        control = WidgetControl(widget=hbox, position=position)\n        self.add(control)\n\n    def add_widget(self, widget, position=\"topright\", **kwargs):\n        \"\"\"Add a widget to the map.\n\n        Args:\n            widget (ipywidgets.Widget): The widget to add.\n            position (str, optional): Position of the widget. Defaults to \"topright\".\n            **kwargs: Additional keyword arguments for the WidgetControl.\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position, **kwargs)\n        self.add(control)\n\n    def add_layer_control(self):\n        \"\"\"\n        Add a control to toggle map layers on and off.\n        \"\"\"\n        control = LayersControl()\n        self.add_control(control)\n\n    def add_vector(self, vector_data):\n        \"\"\"\n        Add a vector layer to the map from a file path or GeoDataFrame.\n\n        Args:\n            vector_data (str or geopandas.GeoDataFrame): Path to a vector file or a GeoDataFrame.\n\n        Raises:\n            ValueError: If the input is not a valid file path or GeoDataFrame.\n        \"\"\"\n        if isinstance(vector_data, str):\n            gdf = gpd.read_file(vector_data)\n        elif isinstance(vector_data, gpd.GeoDataFrame):\n            gdf = vector_data\n        else:\n            raise ValueError(\"Input must be a file path or a GeoDataFrame.\")\n\n        geo_json_data = gdf.__geo_interface__\n        geo_json_layer = GeoJSON(data=geo_json_data)\n        self.add_layer(geo_json_layer)\n\n    def add_raster(self, url, name=None, colormap=None, opacity=1.0):\n        \"\"\"\n        Add a raster tile layer to the map.\n\n        Args:\n            url (str): URL template for the raster tiles.\n            name (str, optional): Layer name. Defaults to \"Raster Layer\".\n            colormap (optional): Colormap to apply (not used here but reserved).\n            opacity (float, optional): Opacity of the layer (0.0 to 1.0). Defaults to 1.0.\n        \"\"\"\n        tile_layer = TileLayer(\n            url=url,\n            name=name or \"Raster Layer\",\n            opacity=opacity\n        )\n        self.add_layer(tile_layer)\n\n    def add_image(self, url, bounds, opacity=1.0):\n        \"\"\"\n        Add an image overlay to the map.\n\n        Args:\n            url (str): URL of the image.\n            bounds (list): Bounding box of the image [[south, west], [north, east]].\n            opacity (float, optional): Opacity of the image. Defaults to 1.0.\n        \"\"\"\n        image_layer = ImageOverlay(\n            url=url,\n            bounds=bounds,\n            opacity=opacity\n        )\n        self.add_layer(image_layer)\n\n    def add_video(self, url, bounds, opacity=1.0):\n        \"\"\"\n        Add a video overlay to the map.\n\n        Args:\n            url (str): URL of the video.\n            bounds (list): Bounding box for the video [[south, west], [north, east]].\n            opacity (float, optional): Opacity of the video. Defaults to 1.0.\n        \"\"\"\n        video_layer = VideoOverlay(\n            url=url,\n            bounds=bounds,\n            opacity=opacity\n        )\n        self.add_layer(video_layer)\n\n    def add_wms_layer(self, url, layers, name=None, format='image/png', transparent=True, **extra_params):\n        \"\"\"\n        Add a WMS (Web Map Service) layer to the map.\n\n        Args:\n            url (str): WMS base URL.\n            layers (str): Comma-separated list of layer names.\n            name (str, optional): Display name for the layer. Defaults to \"WMS Layer\".\n            format (str, optional): Image format. Defaults to 'image/png'.\n            transparent (bool, optional): Whether the background is transparent. Defaults to True.\n            **extra_params: Additional parameters to pass to the WMSLayer.\n        \"\"\"\n        wms_layer = WMSLayer(\n            url=url,\n            layers=layers,\n            name=name or \"WMS Layer\",\n            format=format,\n            transparent=transparent,\n            **extra_params\n        )\n        self.add_layer(wms_layer)\n\n    def show_map(self):\n        \"\"\"\n        Display the map in a Jupyter notebook or compatible environment.\n\n        Returns:\n            ipyleaflet.Map: The configured map.\n        \"\"\"\n        return self\n\n    def add_search_control(self, position=\"topleft\", zoom=10):\n        \"\"\"\n        Add a search bar to the map using Nominatim geocoder.\n        \"\"\"\n        search = SearchControl(\n            position=position,\n            url='https://nominatim.openstreetmap.org/search?format=json&amp;q={s}',\n            zoom=zoom,\n            marker=Marker()  # \u2705 Provide a valid Marker object\n        )\n        self.add_control(search)\n\n\n    def add_esa_worldcover(self, position=\"bottomright\"):\n        import ipywidgets as widgets\n        from ipyleaflet import WMSLayer, WidgetControl\n        import leafmap\n\n        esa_layer = WMSLayer(\n            url=\"https://services.terrascope.be/wms/v2?\",\n            layers=\"WORLDCOVER_2021_MAP\",\n            name=\"ESA WorldCover 2021\",\n            transparent=True,\n            format=\"image/png\"\n        )\n        self.add_layer(esa_layer)\n\n        legend_dict = leafmap.builtin_legends['ESA_WorldCover']\n\n        def format_legend_html(legend_dict, title=\"ESA WorldCover Legend\"):\n            html = f\"&lt;div style='padding:10px;background:white;font-size:12px'&gt;&lt;b&gt;{title}&lt;/b&gt;&lt;br&gt;\"\n            for label, color in legend_dict.items():\n                html += f\"&lt;span style='color:#{color}'&gt;\u25a0&lt;/span&gt; {label}&lt;br&gt;\"\n            html += \"&lt;/div&gt;\"\n            return html\n\n        legend_html = format_legend_html(legend_dict)\n        legend_widget = widgets.HTML(value=legend_html)\n        legend_control = WidgetControl(widget=legend_widget, position=position)\n        self.add_control(legend_control)\n\n    def add_circle_markers_from_xy(self, gdf, radius=5, color=\"red\", fill_color=\"yellow\", fill_opacity=0.8):\n        \"\"\"\n        Add circle markers from a GeoDataFrame with lat/lon columns using MarkerCluster.\n\n        Args:\n            gdf (GeoDataFrame): Must contain 'latitude' and 'longitude' columns.\n            radius (int): Radius of each marker.\n            color (str): Outline color.\n            fill_color (str): Fill color.\n            fill_opacity (float): Fill opacity.\n        \"\"\"\n        if 'latitude' not in gdf.columns or 'longitude' not in gdf.columns:\n            raise ValueError(\"GeoDataFrame must contain 'latitude' and 'longitude' columns\")\n\n        markers = []\n        for _, row in gdf.iterrows():\n            marker = CircleMarker(\n                location=(row['latitude'], row['longitude']),\n                radius=radius,\n                color=color,\n                fill_color=fill_color,\n                fill_opacity=fill_opacity,\n                stroke=True\n            )\n            markers.append(marker)\n\n        cluster = MarkerCluster(markers=markers)\n        self.add_layer(cluster)\n\n    def add_choropleth(self, url, column, colormap=\"YlOrRd\"):\n        \"\"\"\n        Simulate a choropleth using GeoJSON layer and dynamic styling.\n\n        Args:\n            url (str): GeoJSON file URL.\n            column (str): Attribute column to color by.\n            colormap (str): Color ramp name (from branca.colormap).\n        \"\"\"\n        import branca.colormap as cm\n        import json\n\n        gdf = gpd.read_file(url)\n        gdf = gdf.to_crs(\"EPSG:4326\")\n        gdf[\"id\"] = gdf.index.astype(str)\n\n        values = gdf[column]\n        cmap = cm.linear.__getattribute__(colormap).scale(values.min(), values.max())\n\n        def style_dict(feature):\n            value = gdf.loc[int(feature['id']), column]\n            return {\n                'fillColor': cmap(value),\n                'color': 'black',\n                'weight': 0.5,\n                'fillOpacity': 0.7\n            }\n\n        geo_json = json.loads(gdf.to_json())\n        layer = GeoJSON(\n            data=geo_json,\n            style={\n                'color': 'black',\n                'fillColor': 'blue',\n                'weight': 0.5,\n                'fillOpacity': 0.7\n            },\n            name=\"Choropleth\"\n        )\n        self.add_layer(layer)\n\n    def add_split_rasters_leafmap(self, pre_url, post_url, pre_name=\"Pre-event\", post_name=\"Post-event\", overwrite=True):\n        \"\"\"\n        Use leafmap to split and visualize two remote raster .tif files.\n        \"\"\"\n        import leafmap\n        import rasterio\n        import os\n\n        def download_and_check(url, path):\n            file = leafmap.download_file(url, path, overwrite=overwrite)  # \u2705 Ensure overwrite is passed here\n            try:\n                with rasterio.open(file) as src:\n                    _ = src.meta\n                return file\n            except Exception as e:\n                raise ValueError(f\"{path} is not a valid GeoTIFF: {e}\")\n\n        pre_tif = download_and_check(pre_url, \"pre_event.tif\")\n        post_tif = download_and_check(post_url, \"post_event.tif\")\n\n        m = leafmap.Map(center=self.center, zoom=self.zoom)\n        m.split_map(left_layer=pre_tif, right_layer=post_tif, left_label=pre_name, right_label=post_name)\n        return m\n\n    def add_building_polygons(self, url):\n        \"\"\"\n        Add building polygons with red outline and no fill.\n        \"\"\"\n        gdf = gpd.read_file(url)\n        geo_json = gdf.__geo_interface__\n\n        style = {\n            \"color\": \"red\",\n            \"weight\": 1,\n            \"fill\": False,\n            \"fillOpacity\": 0.0\n        }\n\n        self.add_layer(GeoJSON(data=geo_json, style=style, name=\"Buildings\"))\n\n    def add_roads(self, url):\n        \"\"\"\n        Add road polylines with red color and width 2.\n        \"\"\"\n        gdf = gpd.read_file(url)\n        geo_json = gdf.__geo_interface__\n\n        style = {\n            \"color\": \"red\",\n            \"weight\": 2,\n            \"opacity\": 1.0\n        }\n\n        self.add_layer(GeoJSON(data=geo_json, style=style, name=\"Roads\"))\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.__init__","title":"<code>__init__(center, zoom=12, **kwargs)</code>","text":"<p>Initialize the custom map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>tuple</code> <p>Latitude and longitude of the map center.</p> required <code>zoom</code> <code>int</code> <p>Zoom level of the map. Defaults to 12.</p> <code>12</code> <code>**kwargs</code> <p>Additional keyword arguments for ipyleaflet.Map.</p> <code>{}</code> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def __init__(self, center, zoom=12, **kwargs):\n    \"\"\"\n    Initialize the custom map.\n\n    Args:\n        center (tuple): Latitude and longitude of the map center.\n        zoom (int, optional): Zoom level of the map. Defaults to 12.\n        **kwargs: Additional keyword arguments for ipyleaflet.Map.\n    \"\"\"\n    super().__init__(center=center, zoom=zoom, **kwargs)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_basemap","title":"<code>add_basemap(basemap_name)</code>","text":"<p>Add a basemap layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap_name</code> <code>str</code> <p>Name of the basemap ('OpenStreetMap', 'Esri.WorldImagery', or 'OpenTopoMap').</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the basemap name is not supported.</p> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_basemap(self, basemap_name: str):\n    \"\"\"\n    Add a basemap layer to the map.\n\n    Args:\n        basemap_name (str): Name of the basemap ('OpenStreetMap', 'Esri.WorldImagery', or 'OpenTopoMap').\n\n    Raises:\n        ValueError: If the basemap name is not supported.\n    \"\"\"\n    basemap_urls = {\n        \"OpenStreetMap\": \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        \"Esri.WorldImagery\": \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n        \"OpenTopoMap\": \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\n    }\n\n    if basemap_name not in basemap_urls:\n        raise ValueError(f\"Basemap '{basemap_name}' is not supported.\")\n\n    basemap = TileLayer(url=basemap_urls[basemap_name])\n    self.add_layer(basemap)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_basemap_gui","title":"<code>add_basemap_gui(options=None, position='topright')</code>","text":"<p>Adds a graphical user interface (GUI) for selecting basemaps.</p> <p>Parameters:</p> Name Type Description Default <code>-options</code> <code>list</code> <p>A list of basemap options to display in the dropdown. [\"OpenStreetMap.Mapnik\", \"OpenTopoMap\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"].</p> required <code>-position</code> <code>str</code> <p>The position of the widget on the map. Defaults to \"topright\".</p> required Behavior <ul> <li>A toggle button is used to show or hide the dropdown and close button.</li> <li>The dropdown allows users to select a bsemap from the provided options.</li> <li>The close button hides the widget from the map.</li> </ul> Event Handlers <ul> <li><code>on_toggle_change</code>: Toggles the visibility of the dropdown and close button.</li> <li><code>on_button_click</code>: Closes the widget when button is clicked</li> <li><code>on_dropdown_change</code>: Updates the basemap when a new option is selected.</li> </ul> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_basemap_gui(self, options=None, position=\"topright\"):    \n    \"\"\"\n    Adds a graphical user interface (GUI) for selecting basemaps.\n\n    Args:\n        -options (list, optional): A list of basemap options to display in the dropdown.\n           [\"OpenStreetMap.Mapnik\", \"OpenTopoMap\", \"Esri.WorldImagery\", \"CartoDB.DarkMatter\"].\n        -position (str, optional): The position of the widget on the map. Defaults to \"topright\".\n\n    Behavior:\n        - A toggle button is used to show or hide the dropdown and close button.\n        - The dropdown allows users to select a bsemap from the provided options.\n        - The close button hides the widget from the map.\n\n    Event Handlers:\n        - `on_toggle_change`: Toggles the visibility of the dropdown and close button.\n        - `on_button_click`: Closes the widget when button is clicked\n        - `on_dropdown_change`: Updates the basemap when a new option is selected.\n    \"\"\"\n    if options is None:\n        options = [\n            \"OpenStreetMap.Mapnik\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"CartoDB.DarkMatter\",\n        ]\n\n    toggle = widgets.ToggleButton(\n        value=True,\n        button_style=\"\",\n        tooltip=\"Click me\",\n        icon=\"map\",\n    )\n    toggle.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n    dropdown = widgets.Dropdown(\n        options=options,\n        value=options[0],\n        description=\"Basemap:\",\n        style={\"description_width\": \"initial\"},\n    )\n    dropdown.layout = widgets.Layout(width=\"250px\", height=\"38px\")\n\n    button = widgets.Button(\n        icon=\"times\",\n    )\n    button.layout = widgets.Layout(width=\"38px\", height=\"38px\")\n\n    hbox = widgets.HBox([toggle, dropdown, button])\n\n    def on_toggle_change(change):\n        if change[\"new\"]:\n            hbox.children = [toggle, dropdown, button]\n        else:\n            hbox.children = [toggle]\n\n    toggle.observe(on_toggle_change, names=\"value\")\n\n    def on_button_click(b):\n        hbox.close()\n        toggle.close()\n        dropdown.close()\n        button.close()\n\n    button.on_click(on_button_click)\n\n    def on_dropdown_change(change):\n        if change[\"new\"]:\n            self.layers = self.layers[:-2]\n            self.add_basemap(change[\"new\"])\n\n    dropdown.observe(on_dropdown_change, names=\"value\")\n\n    control = WidgetControl(widget=hbox, position=position)\n    self.add(control)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_building_polygons","title":"<code>add_building_polygons(url)</code>","text":"<p>Add building polygons with red outline and no fill.</p> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_building_polygons(self, url):\n    \"\"\"\n    Add building polygons with red outline and no fill.\n    \"\"\"\n    gdf = gpd.read_file(url)\n    geo_json = gdf.__geo_interface__\n\n    style = {\n        \"color\": \"red\",\n        \"weight\": 1,\n        \"fill\": False,\n        \"fillOpacity\": 0.0\n    }\n\n    self.add_layer(GeoJSON(data=geo_json, style=style, name=\"Buildings\"))\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_choropleth","title":"<code>add_choropleth(url, column, colormap='YlOrRd')</code>","text":"<p>Simulate a choropleth using GeoJSON layer and dynamic styling.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>GeoJSON file URL.</p> required <code>column</code> <code>str</code> <p>Attribute column to color by.</p> required <code>colormap</code> <code>str</code> <p>Color ramp name (from branca.colormap).</p> <code>'YlOrRd'</code> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_choropleth(self, url, column, colormap=\"YlOrRd\"):\n    \"\"\"\n    Simulate a choropleth using GeoJSON layer and dynamic styling.\n\n    Args:\n        url (str): GeoJSON file URL.\n        column (str): Attribute column to color by.\n        colormap (str): Color ramp name (from branca.colormap).\n    \"\"\"\n    import branca.colormap as cm\n    import json\n\n    gdf = gpd.read_file(url)\n    gdf = gdf.to_crs(\"EPSG:4326\")\n    gdf[\"id\"] = gdf.index.astype(str)\n\n    values = gdf[column]\n    cmap = cm.linear.__getattribute__(colormap).scale(values.min(), values.max())\n\n    def style_dict(feature):\n        value = gdf.loc[int(feature['id']), column]\n        return {\n            'fillColor': cmap(value),\n            'color': 'black',\n            'weight': 0.5,\n            'fillOpacity': 0.7\n        }\n\n    geo_json = json.loads(gdf.to_json())\n    layer = GeoJSON(\n        data=geo_json,\n        style={\n            'color': 'black',\n            'fillColor': 'blue',\n            'weight': 0.5,\n            'fillOpacity': 0.7\n        },\n        name=\"Choropleth\"\n    )\n    self.add_layer(layer)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_circle_markers_from_xy","title":"<code>add_circle_markers_from_xy(gdf, radius=5, color='red', fill_color='yellow', fill_opacity=0.8)</code>","text":"<p>Add circle markers from a GeoDataFrame with lat/lon columns using MarkerCluster.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>Must contain 'latitude' and 'longitude' columns.</p> required <code>radius</code> <code>int</code> <p>Radius of each marker.</p> <code>5</code> <code>color</code> <code>str</code> <p>Outline color.</p> <code>'red'</code> <code>fill_color</code> <code>str</code> <p>Fill color.</p> <code>'yellow'</code> <code>fill_opacity</code> <code>float</code> <p>Fill opacity.</p> <code>0.8</code> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_circle_markers_from_xy(self, gdf, radius=5, color=\"red\", fill_color=\"yellow\", fill_opacity=0.8):\n    \"\"\"\n    Add circle markers from a GeoDataFrame with lat/lon columns using MarkerCluster.\n\n    Args:\n        gdf (GeoDataFrame): Must contain 'latitude' and 'longitude' columns.\n        radius (int): Radius of each marker.\n        color (str): Outline color.\n        fill_color (str): Fill color.\n        fill_opacity (float): Fill opacity.\n    \"\"\"\n    if 'latitude' not in gdf.columns or 'longitude' not in gdf.columns:\n        raise ValueError(\"GeoDataFrame must contain 'latitude' and 'longitude' columns\")\n\n    markers = []\n    for _, row in gdf.iterrows():\n        marker = CircleMarker(\n            location=(row['latitude'], row['longitude']),\n            radius=radius,\n            color=color,\n            fill_color=fill_color,\n            fill_opacity=fill_opacity,\n            stroke=True\n        )\n        markers.append(marker)\n\n    cluster = MarkerCluster(markers=markers)\n    self.add_layer(cluster)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_image","title":"<code>add_image(url, bounds, opacity=1.0)</code>","text":"<p>Add an image overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL of the image.</p> required <code>bounds</code> <code>list</code> <p>Bounding box of the image [[south, west], [north, east]].</p> required <code>opacity</code> <code>float</code> <p>Opacity of the image. Defaults to 1.0.</p> <code>1.0</code> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_image(self, url, bounds, opacity=1.0):\n    \"\"\"\n    Add an image overlay to the map.\n\n    Args:\n        url (str): URL of the image.\n        bounds (list): Bounding box of the image [[south, west], [north, east]].\n        opacity (float, optional): Opacity of the image. Defaults to 1.0.\n    \"\"\"\n    image_layer = ImageOverlay(\n        url=url,\n        bounds=bounds,\n        opacity=opacity\n    )\n    self.add_layer(image_layer)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_layer_control","title":"<code>add_layer_control()</code>","text":"<p>Add a control to toggle map layers on and off.</p> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"\n    Add a control to toggle map layers on and off.\n    \"\"\"\n    control = LayersControl()\n    self.add_control(control)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_raster","title":"<code>add_raster(url, name=None, colormap=None, opacity=1.0)</code>","text":"<p>Add a raster tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL template for the raster tiles.</p> required <code>name</code> <code>str</code> <p>Layer name. Defaults to \"Raster Layer\".</p> <code>None</code> <code>colormap</code> <code>optional</code> <p>Colormap to apply (not used here but reserved).</p> <code>None</code> <code>opacity</code> <code>float</code> <p>Opacity of the layer (0.0 to 1.0). Defaults to 1.0.</p> <code>1.0</code> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_raster(self, url, name=None, colormap=None, opacity=1.0):\n    \"\"\"\n    Add a raster tile layer to the map.\n\n    Args:\n        url (str): URL template for the raster tiles.\n        name (str, optional): Layer name. Defaults to \"Raster Layer\".\n        colormap (optional): Colormap to apply (not used here but reserved).\n        opacity (float, optional): Opacity of the layer (0.0 to 1.0). Defaults to 1.0.\n    \"\"\"\n    tile_layer = TileLayer(\n        url=url,\n        name=name or \"Raster Layer\",\n        opacity=opacity\n    )\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_roads","title":"<code>add_roads(url)</code>","text":"<p>Add road polylines with red color and width 2.</p> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_roads(self, url):\n    \"\"\"\n    Add road polylines with red color and width 2.\n    \"\"\"\n    gdf = gpd.read_file(url)\n    geo_json = gdf.__geo_interface__\n\n    style = {\n        \"color\": \"red\",\n        \"weight\": 2,\n        \"opacity\": 1.0\n    }\n\n    self.add_layer(GeoJSON(data=geo_json, style=style, name=\"Roads\"))\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_search_control","title":"<code>add_search_control(position='topleft', zoom=10)</code>","text":"<p>Add a search bar to the map using Nominatim geocoder.</p> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_search_control(self, position=\"topleft\", zoom=10):\n    \"\"\"\n    Add a search bar to the map using Nominatim geocoder.\n    \"\"\"\n    search = SearchControl(\n        position=position,\n        url='https://nominatim.openstreetmap.org/search?format=json&amp;q={s}',\n        zoom=zoom,\n        marker=Marker()  # \u2705 Provide a valid Marker object\n    )\n    self.add_control(search)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_split_rasters_leafmap","title":"<code>add_split_rasters_leafmap(pre_url, post_url, pre_name='Pre-event', post_name='Post-event', overwrite=True)</code>","text":"<p>Use leafmap to split and visualize two remote raster .tif files.</p> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_split_rasters_leafmap(self, pre_url, post_url, pre_name=\"Pre-event\", post_name=\"Post-event\", overwrite=True):\n    \"\"\"\n    Use leafmap to split and visualize two remote raster .tif files.\n    \"\"\"\n    import leafmap\n    import rasterio\n    import os\n\n    def download_and_check(url, path):\n        file = leafmap.download_file(url, path, overwrite=overwrite)  # \u2705 Ensure overwrite is passed here\n        try:\n            with rasterio.open(file) as src:\n                _ = src.meta\n            return file\n        except Exception as e:\n            raise ValueError(f\"{path} is not a valid GeoTIFF: {e}\")\n\n    pre_tif = download_and_check(pre_url, \"pre_event.tif\")\n    post_tif = download_and_check(post_url, \"post_event.tif\")\n\n    m = leafmap.Map(center=self.center, zoom=self.zoom)\n    m.split_map(left_layer=pre_tif, right_layer=post_tif, left_label=pre_name, right_label=post_name)\n    return m\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_vector","title":"<code>add_vector(vector_data)</code>","text":"<p>Add a vector layer to the map from a file path or GeoDataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>vector_data</code> <code>str or GeoDataFrame</code> <p>Path to a vector file or a GeoDataFrame.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the input is not a valid file path or GeoDataFrame.</p> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_vector(self, vector_data):\n    \"\"\"\n    Add a vector layer to the map from a file path or GeoDataFrame.\n\n    Args:\n        vector_data (str or geopandas.GeoDataFrame): Path to a vector file or a GeoDataFrame.\n\n    Raises:\n        ValueError: If the input is not a valid file path or GeoDataFrame.\n    \"\"\"\n    if isinstance(vector_data, str):\n        gdf = gpd.read_file(vector_data)\n    elif isinstance(vector_data, gpd.GeoDataFrame):\n        gdf = vector_data\n    else:\n        raise ValueError(\"Input must be a file path or a GeoDataFrame.\")\n\n    geo_json_data = gdf.__geo_interface__\n    geo_json_layer = GeoJSON(data=geo_json_data)\n    self.add_layer(geo_json_layer)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_video","title":"<code>add_video(url, bounds, opacity=1.0)</code>","text":"<p>Add a video overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL of the video.</p> required <code>bounds</code> <code>list</code> <p>Bounding box for the video [[south, west], [north, east]].</p> required <code>opacity</code> <code>float</code> <p>Opacity of the video. Defaults to 1.0.</p> <code>1.0</code> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_video(self, url, bounds, opacity=1.0):\n    \"\"\"\n    Add a video overlay to the map.\n\n    Args:\n        url (str): URL of the video.\n        bounds (list): Bounding box for the video [[south, west], [north, east]].\n        opacity (float, optional): Opacity of the video. Defaults to 1.0.\n    \"\"\"\n    video_layer = VideoOverlay(\n        url=url,\n        bounds=bounds,\n        opacity=opacity\n    )\n    self.add_layer(video_layer)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_widget","title":"<code>add_widget(widget, position='topright', **kwargs)</code>","text":"<p>Add a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>The widget to add.</p> required <code>position</code> <code>str</code> <p>Position of the widget. Defaults to \"topright\".</p> <code>'topright'</code> <code>**kwargs</code> <p>Additional keyword arguments for the WidgetControl.</p> <code>{}</code> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_widget(self, widget, position=\"topright\", **kwargs):\n    \"\"\"Add a widget to the map.\n\n    Args:\n        widget (ipywidgets.Widget): The widget to add.\n        position (str, optional): Position of the widget. Defaults to \"topright\".\n        **kwargs: Additional keyword arguments for the WidgetControl.\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position, **kwargs)\n    self.add(control)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_wms_layer","title":"<code>add_wms_layer(url, layers, name=None, format='image/png', transparent=True, **extra_params)</code>","text":"<p>Add a WMS (Web Map Service) layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>WMS base URL.</p> required <code>layers</code> <code>str</code> <p>Comma-separated list of layer names.</p> required <code>name</code> <code>str</code> <p>Display name for the layer. Defaults to \"WMS Layer\".</p> <code>None</code> <code>format</code> <code>str</code> <p>Image format. Defaults to 'image/png'.</p> <code>'image/png'</code> <code>transparent</code> <code>bool</code> <p>Whether the background is transparent. Defaults to True.</p> <code>True</code> <code>**extra_params</code> <p>Additional parameters to pass to the WMSLayer.</p> <code>{}</code> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_wms_layer(self, url, layers, name=None, format='image/png', transparent=True, **extra_params):\n    \"\"\"\n    Add a WMS (Web Map Service) layer to the map.\n\n    Args:\n        url (str): WMS base URL.\n        layers (str): Comma-separated list of layer names.\n        name (str, optional): Display name for the layer. Defaults to \"WMS Layer\".\n        format (str, optional): Image format. Defaults to 'image/png'.\n        transparent (bool, optional): Whether the background is transparent. Defaults to True.\n        **extra_params: Additional parameters to pass to the WMSLayer.\n    \"\"\"\n    wms_layer = WMSLayer(\n        url=url,\n        layers=layers,\n        name=name or \"WMS Layer\",\n        format=format,\n        transparent=transparent,\n        **extra_params\n    )\n    self.add_layer(wms_layer)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.show_map","title":"<code>show_map()</code>","text":"<p>Display the map in a Jupyter notebook or compatible environment.</p> <p>Returns:</p> Type Description <p>ipyleaflet.Map: The configured map.</p> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def show_map(self):\n    \"\"\"\n    Display the map in a Jupyter notebook or compatible environment.\n\n    Returns:\n        ipyleaflet.Map: The configured map.\n    \"\"\"\n    return self\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install Geobay, run this command in your terminal:</p> <pre><code>pip install geobay\n</code></pre> <p>This is the preferred method to install Geobay, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install Geobay from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/Caseyshea96/geobay\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use Geobay in a project:</p> <pre><code>import geobay\n</code></pre>"},{"location":"examples/Lab7_methods/","title":"Lab7 methods","text":"In\u00a0[1]: Copied! <pre>pip install geobay --upgrade\n</pre> pip install geobay --upgrade <pre>Requirement already satisfied: geobay in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (0.0.54)\nRequirement already satisfied: numpy in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geobay) (2.2.4)\nRequirement already satisfied: ipyleaflet&gt;=0.17.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geobay) (0.19.2)\nRequirement already satisfied: geopandas&gt;=0.10.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geobay) (1.0.1)\nRequirement already satisfied: pyogrio&gt;=0.7.2 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geopandas&gt;=0.10.0-&gt;geobay) (0.10.0)\nRequirement already satisfied: packaging in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geopandas&gt;=0.10.0-&gt;geobay) (24.2)\nRequirement already satisfied: pandas&gt;=1.4.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geopandas&gt;=0.10.0-&gt;geobay) (2.2.3)\nRequirement already satisfied: pyproj&gt;=3.3.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geopandas&gt;=0.10.0-&gt;geobay) (3.7.1)\nRequirement already satisfied: shapely&gt;=2.0.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geopandas&gt;=0.10.0-&gt;geobay) (2.0.7)\nRequirement already satisfied: branca&gt;=0.5.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipyleaflet&gt;=0.17.0-&gt;geobay) (0.8.1)\nRequirement already satisfied: ipywidgets&lt;9,&gt;=7.6.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipyleaflet&gt;=0.17.0-&gt;geobay) (8.1.5)\nRequirement already satisfied: jupyter-leaflet&lt;0.20,&gt;=0.19 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipyleaflet&gt;=0.17.0-&gt;geobay) (0.19.2)\nRequirement already satisfied: traittypes&lt;3,&gt;=0.2.1 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipyleaflet&gt;=0.17.0-&gt;geobay) (0.2.1)\nRequirement already satisfied: xyzservices&gt;=2021.8.1 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipyleaflet&gt;=0.17.0-&gt;geobay) (2025.1.0)\nRequirement already satisfied: jinja2&gt;=3 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from branca&gt;=0.5.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (3.1.6)\nRequirement already satisfied: comm&gt;=0.1.3 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.2.2)\nRequirement already satisfied: ipython&gt;=6.1.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (9.0.2)\nRequirement already satisfied: traitlets&gt;=4.3.1 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (5.14.3)\nRequirement already satisfied: widgetsnbextension~=4.0.12 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (4.0.13)\nRequirement already satisfied: jupyterlab-widgets~=3.0.12 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (3.0.13)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from pandas&gt;=1.4.0-&gt;geopandas&gt;=0.10.0-&gt;geobay) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from pandas&gt;=1.4.0-&gt;geopandas&gt;=0.10.0-&gt;geobay) (2025.2)\nRequirement already satisfied: tzdata&gt;=2022.7 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from pandas&gt;=1.4.0-&gt;geopandas&gt;=0.10.0-&gt;geobay) (2025.2)\nRequirement already satisfied: certifi in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from pyogrio&gt;=0.7.2-&gt;geopandas&gt;=0.10.0-&gt;geobay) (2025.1.31)\nRequirement already satisfied: colorama in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.4.6)\nRequirement already satisfied: decorator in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (5.2.1)\nRequirement already satisfied: ipython-pygments-lexers in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (1.1.1)\nRequirement already satisfied: jedi&gt;=0.16 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.19.2)\nRequirement already satisfied: matplotlib-inline in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.1.7)\nRequirement already satisfied: prompt_toolkit&lt;3.1.0,&gt;=3.0.41 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (3.0.50)\nRequirement already satisfied: pygments&gt;=2.4.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (2.19.1)\nRequirement already satisfied: stack_data in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.6.3)\nRequirement already satisfied: typing_extensions&gt;=4.6 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (4.13.0)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from jinja2&gt;=3-&gt;branca&gt;=0.5.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (3.0.2)\nRequirement already satisfied: six&gt;=1.5 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas&gt;=1.4.0-&gt;geopandas&gt;=0.10.0-&gt;geobay) (1.17.0)\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.4 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.8.4)\nRequirement already satisfied: wcwidth in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from prompt_toolkit&lt;3.1.0,&gt;=3.0.41-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.2.13)\nRequirement already satisfied: executing&gt;=1.2.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (2.2.0)\nRequirement already satisfied: asttokens&gt;=2.1.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (3.0.0)\nRequirement already satisfied: pure-eval in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.2.3)\nNote: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[2]: Copied! <pre>from GeoBay import CustomIpyleafletMap\nfrom ipyleaflet import DrawControl\n</pre> from GeoBay import CustomIpyleafletMap from ipyleaflet import DrawControl In\u00a0[3]: Copied! <pre># Create the map centered on a location (NYC)\nmymap = CustomIpyleafletMap(center=[40.6892, -74.0445], zoom=9)\nmymap.add_basemap(\"Esri.WorldImagery\")\nmymap.add_layer_control()\n\n#Loading a GeoJSON vector layer\nimport geopandas as gpd\nvector_url = \"https://github.com/opengeos/datasets/releases/download/places/nyc_roads.geojson\"\ngdf = gpd.read_file(vector_url)\ngdf = gdf.to_crs(epsg=4326)  # Ensure the CRS is WGS84 for web mapping\nmymap.add_vector(gdf)\n\n\n# Sample image URL and bounds\n#image_url = \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSUXq-znfyXENLtD64Ijh3gB-psZGO7WlY3vg&amp;s\"\n#bounds = [(41.1485466,-73.1655751), (40.8967207,-73.5636963)]\n#mymap.add_image(image_url, bounds, opacity=1)\n\nvideo_url = \"https://www.mapbox.com/bites/00188/patricia_nasa.webm\"\nbounds = [(41.0165271, -74.1999349), (40.7450505, -74.6063112)]\nmymap.add_video(video_url, bounds, opacity=1)\n\nmymap.show_map()\n</pre> # Create the map centered on a location (NYC) mymap = CustomIpyleafletMap(center=[40.6892, -74.0445], zoom=9) mymap.add_basemap(\"Esri.WorldImagery\") mymap.add_layer_control()  #Loading a GeoJSON vector layer import geopandas as gpd vector_url = \"https://github.com/opengeos/datasets/releases/download/places/nyc_roads.geojson\" gdf = gpd.read_file(vector_url) gdf = gdf.to_crs(epsg=4326)  # Ensure the CRS is WGS84 for web mapping mymap.add_vector(gdf)   # Sample image URL and bounds #image_url = \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSUXq-znfyXENLtD64Ijh3gB-psZGO7WlY3vg&amp;s\" #bounds = [(41.1485466,-73.1655751), (40.8967207,-73.5636963)] #mymap.add_image(image_url, bounds, opacity=1)  video_url = \"https://www.mapbox.com/bites/00188/patricia_nasa.webm\" bounds = [(41.0165271, -74.1999349), (40.7450505, -74.6063112)] mymap.add_video(video_url, bounds, opacity=1)  mymap.show_map() Out[3]: In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/Lab8_methods/","title":"Lab8 methods","text":"In\u00a0[1]: Copied! <pre>from GeoBay.GeoBay import CustomIpyleafletMap as ipyleaflet_Map\n\n# Create the map\nm = ipyleaflet_Map(center=[37.7749, -122.4194], zoom=4)\n\n# Add the basemap GUI widget\nm.add_basemap_gui()\n\n# Show the map\nm.show_map()\n</pre> from GeoBay.GeoBay import CustomIpyleafletMap as ipyleaflet_Map  # Create the map m = ipyleaflet_Map(center=[37.7749, -122.4194], zoom=4)  # Add the basemap GUI widget m.add_basemap_gui()  # Show the map m.show_map() Out[1]:"},{"location":"examples/Lab9_methods/","title":"Lab9 methods","text":"In\u00a0[1]: Copied! <pre>pip install geobay\n</pre> pip install geobay <pre>Requirement already satisfied: geobay in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (0.0.54)\nRequirement already satisfied: numpy in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geobay) (2.2.4)\nRequirement already satisfied: ipyleaflet&gt;=0.17.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geobay) (0.19.2)\nRequirement already satisfied: geopandas&gt;=0.10.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geobay) (1.0.1)\nRequirement already satisfied: pyogrio&gt;=0.7.2 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geopandas&gt;=0.10.0-&gt;geobay) (0.10.0)\nRequirement already satisfied: packaging in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geopandas&gt;=0.10.0-&gt;geobay) (24.2)\nRequirement already satisfied: pandas&gt;=1.4.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geopandas&gt;=0.10.0-&gt;geobay) (2.2.3)\nRequirement already satisfied: pyproj&gt;=3.3.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geopandas&gt;=0.10.0-&gt;geobay) (3.7.1)\nRequirement already satisfied: shapely&gt;=2.0.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from geopandas&gt;=0.10.0-&gt;geobay) (2.0.7)\nRequirement already satisfied: branca&gt;=0.5.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipyleaflet&gt;=0.17.0-&gt;geobay) (0.8.1)\nRequirement already satisfied: ipywidgets&lt;9,&gt;=7.6.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipyleaflet&gt;=0.17.0-&gt;geobay) (8.1.5)\nRequirement already satisfied: jupyter-leaflet&lt;0.20,&gt;=0.19 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipyleaflet&gt;=0.17.0-&gt;geobay) (0.19.2)\nRequirement already satisfied: traittypes&lt;3,&gt;=0.2.1 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipyleaflet&gt;=0.17.0-&gt;geobay) (0.2.1)\nRequirement already satisfied: xyzservices&gt;=2021.8.1 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipyleaflet&gt;=0.17.0-&gt;geobay) (2025.1.0)\nRequirement already satisfied: jinja2&gt;=3 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from branca&gt;=0.5.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (3.1.6)\nRequirement already satisfied: comm&gt;=0.1.3 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.2.2)\nRequirement already satisfied: ipython&gt;=6.1.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (9.0.2)\nRequirement already satisfied: traitlets&gt;=4.3.1 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (5.14.3)\nRequirement already satisfied: widgetsnbextension~=4.0.12 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (4.0.13)\nRequirement already satisfied: jupyterlab-widgets~=3.0.12 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (3.0.13)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from pandas&gt;=1.4.0-&gt;geopandas&gt;=0.10.0-&gt;geobay) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from pandas&gt;=1.4.0-&gt;geopandas&gt;=0.10.0-&gt;geobay) (2025.2)\nRequirement already satisfied: tzdata&gt;=2022.7 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from pandas&gt;=1.4.0-&gt;geopandas&gt;=0.10.0-&gt;geobay) (2025.2)\nRequirement already satisfied: certifi in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from pyogrio&gt;=0.7.2-&gt;geopandas&gt;=0.10.0-&gt;geobay) (2025.1.31)\nRequirement already satisfied: colorama in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.4.6)\nRequirement already satisfied: decorator in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (5.2.1)\nRequirement already satisfied: ipython-pygments-lexers in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (1.1.1)\nRequirement already satisfied: jedi&gt;=0.16 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.19.2)\nRequirement already satisfied: matplotlib-inline in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.1.7)\nRequirement already satisfied: prompt_toolkit&lt;3.1.0,&gt;=3.0.41 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (3.0.50)\nRequirement already satisfied: pygments&gt;=2.4.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (2.19.1)\nRequirement already satisfied: stack_data in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.6.3)\nRequirement already satisfied: typing_extensions&gt;=4.6 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (4.13.0)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from jinja2&gt;=3-&gt;branca&gt;=0.5.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (3.0.2)\nRequirement already satisfied: six&gt;=1.5 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas&gt;=1.4.0-&gt;geopandas&gt;=0.10.0-&gt;geobay) (1.17.0)\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.4 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.8.4)\nRequirement already satisfied: wcwidth in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from prompt_toolkit&lt;3.1.0,&gt;=3.0.41-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.2.13)\nRequirement already satisfied: executing&gt;=1.2.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (2.2.0)\nRequirement already satisfied: asttokens&gt;=2.1.0 in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (3.0.0)\nRequirement already satisfied: pure-eval in c:\\users\\shea9\\documents\\github\\geo\\lib\\site-packages (from stack_data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet&gt;=0.17.0-&gt;geobay) (0.2.3)\nNote: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[2]: Copied! <pre>from GeoBay.GeoBay import CustomIpyleafletMap as ipyleaflet_Map\n\n# Example 1: Basic map with Search Control\n\nm = ipyleaflet_Map(center=[37.7749, -122.4194], zoom=4)\nm.add_search_control()\nm.show_map()\n</pre> from GeoBay.GeoBay import CustomIpyleafletMap as ipyleaflet_Map  # Example 1: Basic map with Search Control  m = ipyleaflet_Map(center=[37.7749, -122.4194], zoom=4) m.add_search_control() m.show_map() Out[2]: In\u00a0[3]: Copied! <pre># Example 2: Adding a custom WMS layer to the map  \n\nm = ipyleaflet_Map(center=[0, 0], zoom=2)\nm.add_esa_worldcover()\nm.show_map()\n</pre> # Example 2: Adding a custom WMS layer to the map    m = ipyleaflet_Map(center=[0, 0], zoom=2) m.add_esa_worldcover() m.show_map()  Out[3]: In\u00a0[4]: Copied! <pre>#Example 3: Marker Clusters\n\nimport geopandas as gpd\n# Load building centroids GeoJSON\nurl = \"https://github.com/opengeos/datasets/releases/download/places/wa_building_centroids.geojson\"\ngdf = gpd.read_file(url)\n\n# Add lat/lon columns from geometry\ngdf[\"longitude\"] = gdf.geometry.x\ngdf[\"latitude\"] = gdf.geometry.y\n\n# Create map and add circle markers\nm = ipyleaflet_Map(center=[gdf.latitude.mean(), gdf.longitude.mean()], zoom=14)\nm.add_circle_markers_from_xy(gdf)\nm.show_map()\n</pre> #Example 3: Marker Clusters  import geopandas as gpd # Load building centroids GeoJSON url = \"https://github.com/opengeos/datasets/releases/download/places/wa_building_centroids.geojson\" gdf = gpd.read_file(url)  # Add lat/lon columns from geometry gdf[\"longitude\"] = gdf.geometry.x gdf[\"latitude\"] = gdf.geometry.y  # Create map and add circle markers m = ipyleaflet_Map(center=[gdf.latitude.mean(), gdf.longitude.mean()], zoom=14) m.add_circle_markers_from_xy(gdf) m.show_map()  Out[4]: In\u00a0[5]: Copied! <pre>#Example 4 : Add polygons, road lines, and choropleth\nfrom GeoBay.GeoBay import CustomIpyleafletMap as ipyleaflet_Map\n\nm = ipyleaflet_Map(center=[47.6588, -117.4260], zoom=12)\n\n# Add building polygons\nm.add_building_polygons(\"https://github.com/opengeos/datasets/releases/download/places/wa_overture_buildings.geojson\")\n\nm.add_layer_control()\nm.show_map()\n</pre> #Example 4 : Add polygons, road lines, and choropleth from GeoBay.GeoBay import CustomIpyleafletMap as ipyleaflet_Map  m = ipyleaflet_Map(center=[47.6588, -117.4260], zoom=12)  # Add building polygons m.add_building_polygons(\"https://github.com/opengeos/datasets/releases/download/places/wa_overture_buildings.geojson\")  m.add_layer_control() m.show_map() Out[5]: In\u00a0[6]: Copied! <pre># Add road lines\nm = ipyleaflet_Map(center=[36.1699, -115.1398], zoom=12)\nm.add_roads(\"https://github.com/opengeos/datasets/releases/download/places/las_vegas_roads.geojson\")\nm.add_layer_control()\nm.show_map()\n</pre> # Add road lines m = ipyleaflet_Map(center=[36.1699, -115.1398], zoom=12) m.add_roads(\"https://github.com/opengeos/datasets/releases/download/places/las_vegas_roads.geojson\") m.add_layer_control() m.show_map() Out[6]: In\u00a0[7]: Copied! <pre># Add choropleth\nm.add_choropleth(\"https://github.com/opengeos/datasets/releases/download/us/us_counties.geojson\", \"CENSUSAREA\", colormap=\"YlOrRd_09\")\n\n\nm.add_layer_control()\nm.show_map()\n</pre> # Add choropleth m.add_choropleth(\"https://github.com/opengeos/datasets/releases/download/us/us_counties.geojson\", \"CENSUSAREA\", colormap=\"YlOrRd_09\")   m.add_layer_control() m.show_map() Out[7]: In\u00a0[8]: Copied! <pre># Example 5: Splitmap\n\nfrom GeoBay.GeoBay import CustomIpyleafletMap as ipyleaflet_Map\n\npre_url = \"https://github.com/opengeos/datasets/releases/download/raster/Libya-2023-07-01.tif\"\npost_url = \"https://github.com/opengeos/datasets/releases/download/raster/Libya-2023-09-13.tif\"\n\nm = ipyleaflet_Map(center=[26.33, 17.23], zoom=12)\nleafmap_split = m.add_split_rasters_leafmap(pre_url, post_url, overwrite=True)\nleafmap_split\n</pre> # Example 5: Splitmap  from GeoBay.GeoBay import CustomIpyleafletMap as ipyleaflet_Map  pre_url = \"https://github.com/opengeos/datasets/releases/download/raster/Libya-2023-07-01.tif\" post_url = \"https://github.com/opengeos/datasets/releases/download/raster/Libya-2023-09-13.tif\"  m = ipyleaflet_Map(center=[26.33, 17.23], zoom=12) leafmap_split = m.add_split_rasters_leafmap(pre_url, post_url, overwrite=True) leafmap_split   <pre>Downloading...\nFrom: https://github.com/opengeos/datasets/releases/download/raster/Libya-2023-07-01.tif\nTo: C:\\Users\\shea9\\Documents\\Github\\GeoBay\\docs\\examples\\pre_event.tif\n</pre> <pre>\r  0%|                                                                                                                                                                                 | 0.00/72.1M [00:00&lt;?, ?B/s]</pre> <pre>\r  1%|\u2588\u258f                                                                                                                                                                       | 524k/72.1M [00:00&lt;00:16, 4.39MB/s]</pre> <pre>\r  2%|\u2588\u2588\u2588\u258b                                                                                                                                                                    | 1.57M/72.1M [00:00&lt;00:10, 6.75MB/s]</pre> <pre>\r  4%|\u2588\u2588\u2588\u2588\u2588\u2588                                                                                                                                                                  | 2.62M/72.1M [00:00&lt;00:08, 8.03MB/s]</pre> <pre>\r  5%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                                                                                                               | 3.67M/72.1M [00:00&lt;00:07, 8.92MB/s]</pre> <pre>\r  7%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                                                                                                                           | 5.24M/72.1M [00:00&lt;00:06, 9.89MB/s]</pre> <pre>\r  9%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589                                                                                                                                                        | 6.82M/72.1M [00:00&lt;00:06, 10.5MB/s]</pre> <pre>\r 12%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                                                                                                    | 8.39M/72.1M [00:00&lt;00:05, 10.7MB/s]</pre> <pre>\r 14%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                                                                                                                | 9.96M/72.1M [00:01&lt;00:05, 11.0MB/s]</pre> <pre>\r 16%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                                                                                                             | 11.5M/72.1M [00:01&lt;00:05, 10.9MB/s]</pre> <pre>\r 18%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                                                                                         | 13.1M/72.1M [00:01&lt;00:05, 11.2MB/s]</pre> <pre>\r 20%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                                                                                                     | 14.7M/72.1M [00:01&lt;00:05, 11.3MB/s]</pre> <pre>\r 23%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                                                                                                  | 16.3M/72.1M [00:01&lt;00:04, 11.3MB/s]</pre> <pre>\r 25%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                                                                              | 17.8M/72.1M [00:01&lt;00:04, 11.1MB/s]</pre> <pre>\r 27%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                                                                                          | 19.4M/72.1M [00:01&lt;00:04, 11.2MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                                                                                       | 21.0M/72.1M [00:01&lt;00:04, 11.2MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                                                                   | 22.5M/72.1M [00:02&lt;00:04, 11.2MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                                                                               | 24.1M/72.1M [00:02&lt;00:04, 11.2MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                                                                            | 25.7M/72.1M [00:02&lt;00:04, 11.2MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                                                        | 27.3M/72.1M [00:02&lt;00:04, 11.1MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                                                                    | 28.8M/72.1M [00:02&lt;00:03, 11.2MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                                                                 | 30.4M/72.1M [00:02&lt;00:03, 11.3MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                                             | 32.0M/72.1M [00:02&lt;00:03, 11.6MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                                                         | 33.6M/72.1M [00:03&lt;00:04, 8.79MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                                  | 36.7M/72.1M [00:03&lt;00:02, 12.2MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                                              | 38.3M/72.1M [00:03&lt;00:02, 12.3MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                                           | 39.8M/72.1M [00:03&lt;00:02, 12.0MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                       | 41.4M/72.1M [00:03&lt;00:02, 11.8MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                                   | 43.0M/72.1M [00:03&lt;00:02, 12.0MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                                | 44.6M/72.1M [00:04&lt;00:02, 12.0MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                                            | 46.1M/72.1M [00:04&lt;00:02, 11.8MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                        | 47.7M/72.1M [00:04&lt;00:02, 11.5MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                     | 49.3M/72.1M [00:04&lt;00:01, 11.8MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                                 | 50.9M/72.1M [00:04&lt;00:01, 11.4MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                             | 52.4M/72.1M [00:04&lt;00:01, 11.3MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                          | 54.0M/72.1M [00:04&lt;00:01, 11.4MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                      | 55.6M/72.1M [00:05&lt;00:01, 11.6MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                  | 57.1M/72.1M [00:05&lt;00:01, 11.4MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                               | 58.7M/72.1M [00:05&lt;00:01, 11.5MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                           | 60.3M/72.1M [00:05&lt;00:01, 11.4MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                       | 61.9M/72.1M [00:05&lt;00:00, 11.3MB/s]</pre> <pre>\r 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                    | 63.4M/72.1M [00:05&lt;00:00, 11.4MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                | 65.0M/72.1M [00:05&lt;00:00, 11.6MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f            | 66.6M/72.1M [00:05&lt;00:00, 11.7MB/s]</pre> <pre>\r 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a         | 68.2M/72.1M [00:06&lt;00:00, 11.6MB/s]</pre> <pre>\r 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d     | 69.7M/72.1M [00:06&lt;00:00, 11.5MB/s]</pre> <pre>\r 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 71.3M/72.1M [00:06&lt;00:00, 11.7MB/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 72.1M/72.1M [00:06&lt;00:00, 11.2MB/s]</pre> <pre>\n</pre> <pre>Downloading...\nFrom: https://github.com/opengeos/datasets/releases/download/raster/Libya-2023-09-13.tif\nTo: C:\\Users\\shea9\\Documents\\Github\\GeoBay\\docs\\examples\\post_event.tif\n</pre> <pre>\r  0%|                                                                                                                                                                                  | 0.00/104M [00:00&lt;?, ?B/s]</pre> <pre>\r  1%|\u258a                                                                                                                                                                         | 524k/104M [00:00&lt;00:22, 4.54MB/s]</pre> <pre>\r  2%|\u2588\u2588\u258c                                                                                                                                                                      | 1.57M/104M [00:00&lt;00:14, 6.97MB/s]</pre> <pre>\r  3%|\u2588\u2588\u2588\u2588\u2588                                                                                                                                                                    | 3.15M/104M [00:00&lt;00:11, 8.92MB/s]</pre> <pre>\r  5%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                                                                                                                                                                 | 4.72M/104M [00:00&lt;00:09, 10.1MB/s]</pre> <pre>\r  6%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                                                                                                                              | 6.29M/104M [00:00&lt;00:09, 10.7MB/s]</pre> <pre>\r  8%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                                                                                                                            | 7.86M/104M [00:00&lt;00:08, 10.8MB/s]</pre> <pre>\r  9%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                                                                                                                                                         | 9.44M/104M [00:00&lt;00:08, 11.2MB/s]</pre> <pre>\r 11%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589                                                                                                                                                       | 11.0M/104M [00:01&lt;00:08, 11.2MB/s]</pre> <pre>\r 12%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                                                                                                                                    | 12.6M/104M [00:01&lt;00:07, 11.5MB/s]</pre> <pre>\r 14%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                                                                                                                                  | 14.2M/104M [00:01&lt;00:07, 11.6MB/s]</pre> <pre>\r 15%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                                                                                               | 15.7M/104M [00:01&lt;00:07, 11.3MB/s]</pre> <pre>\r 17%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                                                                                                            | 17.3M/104M [00:01&lt;00:07, 11.2MB/s]</pre> <pre>\r 18%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                                                                                                                                          | 18.9M/104M [00:01&lt;00:07, 11.4MB/s]</pre> <pre>\r 20%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                                                                                                                                       | 20.4M/104M [00:01&lt;00:07, 11.6MB/s]</pre> <pre>\r 21%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                                                                                                     | 22.0M/104M [00:02&lt;00:07, 11.6MB/s]</pre> <pre>\r 23%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                                                                                                                  | 23.6M/104M [00:02&lt;00:07, 11.4MB/s]</pre> <pre>\r 24%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589                                                                                                                                | 25.2M/104M [00:02&lt;00:06, 11.6MB/s]</pre> <pre>\r 26%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                                                                                                             | 26.7M/104M [00:02&lt;00:06, 11.4MB/s]</pre> <pre>\r 27%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                                                                                                           | 28.3M/104M [00:02&lt;00:06, 11.5MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                                                                        | 29.9M/104M [00:02&lt;00:06, 11.7MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                                                                                     | 31.5M/104M [00:02&lt;00:06, 11.6MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                                                                                                                   | 33.0M/104M [00:02&lt;00:06, 11.7MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                                                                                                                | 34.6M/104M [00:03&lt;00:09, 7.49MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                                                                                          | 38.8M/104M [00:03&lt;00:04, 13.2MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                                                      | 40.9M/104M [00:03&lt;00:04, 12.7MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589                                                                                                   | 43.0M/104M [00:03&lt;00:04, 12.3MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                                                                                | 44.6M/104M [00:03&lt;00:04, 12.4MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                                                                              | 46.1M/104M [00:04&lt;00:04, 12.3MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                                           | 47.7M/104M [00:04&lt;00:04, 12.2MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                                                        | 49.3M/104M [00:04&lt;00:04, 12.1MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                                                                                      | 50.9M/104M [00:04&lt;00:04, 12.0MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                                                                                   | 52.4M/104M [00:04&lt;00:04, 11.8MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                                                 | 54.0M/104M [00:04&lt;00:04, 11.8MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                                                              | 55.6M/104M [00:04&lt;00:04, 11.6MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589                                                                            | 57.1M/104M [00:05&lt;00:04, 11.6MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                                         | 58.7M/104M [00:05&lt;00:03, 11.9MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                                                       | 60.3M/104M [00:05&lt;00:03, 11.9MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                                                                    | 61.9M/104M [00:05&lt;00:03, 12.0MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                                                 | 63.4M/104M [00:05&lt;00:03, 12.2MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                               | 65.0M/104M [00:05&lt;00:03, 11.6MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                                                            | 66.6M/104M [00:05&lt;00:03, 12.0MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                                          | 68.2M/104M [00:05&lt;00:03, 11.8MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                                       | 69.7M/104M [00:06&lt;00:02, 12.3MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589                                                     | 71.3M/104M [00:06&lt;00:02, 12.0MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                                                  | 72.9M/104M [00:06&lt;00:02, 12.2MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                                | 74.4M/104M [00:06&lt;00:02, 12.2MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                                             | 76.0M/104M [00:06&lt;00:02, 12.0MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                                          | 77.6M/104M [00:06&lt;00:02, 11.9MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                                        | 79.2M/104M [00:06&lt;00:02, 11.7MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                                     | 80.7M/104M [00:06&lt;00:01, 11.8MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589                                   | 82.3M/104M [00:07&lt;00:01, 11.6MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d                                | 83.9M/104M [00:07&lt;00:01, 11.3MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                              | 85.5M/104M [00:07&lt;00:01, 11.8MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c                           | 87.0M/104M [00:07&lt;00:01, 12.0MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f                        | 88.6M/104M [00:07&lt;00:01, 12.0MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b                      | 90.2M/104M [00:07&lt;00:01, 11.9MB/s]</pre> <pre>\r 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e                   | 91.8M/104M [00:07&lt;00:01, 11.9MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a                 | 93.3M/104M [00:08&lt;00:00, 12.1MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e              | 94.9M/104M [00:08&lt;00:01, 8.31MB/s]</pre> <pre>\r 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e        | 98.6M/104M [00:08&lt;00:00, 13.2MB/s]</pre> <pre>\r 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b     | 101M/104M [00:08&lt;00:00, 12.1MB/s]</pre> <pre>\r 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 102M/104M [00:08&lt;00:00, 12.4MB/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 104M/104M [00:08&lt;00:00, 12.4MB/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 104M/104M [00:08&lt;00:00, 11.6MB/s]</pre> <pre>\n</pre> Out[8]: In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/SplitMap_demo/","title":"SplitMap demo","text":"In\u00a0[1]: Copied! <pre>from GeoBay.foliumap import FoliumMap  # If using as a module\n\n# Initialize the map\nmy_map = FoliumMap(location=(38.5, -98.0), zoom_start=5)\n\n# Add split map functionality\nmy_map.add_split_map('OpenStreetMap', 'Esri WorldImagery')\n\n# Optional: Add layer control\nmy_map.add_layer_control()\n\n# Show the map\nmy_map.show_map()\n</pre> from GeoBay.foliumap import FoliumMap  # If using as a module  # Initialize the map my_map = FoliumMap(location=(38.5, -98.0), zoom_start=5)  # Add split map functionality my_map.add_split_map('OpenStreetMap', 'Esri WorldImagery')  # Optional: Add layer control my_map.add_layer_control()  # Show the map my_map.show_map()   Out[1]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[\u00a0]: Copied! <pre>\n</pre>"}]}