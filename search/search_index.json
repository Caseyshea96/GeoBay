{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Geobay","text":"<p>python package for geog 510</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://Caseyshea96.github.io/GeoBay</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>```{python} import geobay</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Caseyshea96/geoproject510/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>GeoProject510 could always use more documentation, whether as part of the official GeoProject510 docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Caseyshea96/geoproject510/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geoproject510 for local development.</p> <ol> <li> <p>Fork the geoproject510 repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geoproject510.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geoproject510\n$ cd geoproject510/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geoproject510 tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/Caseyshea96/geoproject510/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":""},{"location":"foliumap/#GeoBay.foliumap.FoliumMap","title":"<code>FoliumMap</code>","text":"Source code in <code>GeoBay\\foliumap.py</code> <pre><code>class FoliumMap:\n    def __init__(self, location, zoom_start=3, **kwargs):\n        \"\"\"\n        Initializes a folium map centered at a given location with a specified zoom level.\n\n        Parameters:\n        location (tuple): Latitude and longitude coordinates for the map center.\n        zoom_start (int): The initial zoom level of the map.\n        \"\"\"\n        self.map = folium.Map(location=location, zoom_start=zoom_start, **kwargs)\n\n    def add_basemap(self, basemap='OpenStreetMap'):\n        \"\"\"\n        Adds a basemap to the folium map.\n\n        Parameters:\n        basemap (str): The name of the basemap to add (e.g., 'OpenStreetMap', 'Stamen Terrain', etc.).\n        \"\"\"\n        basemaps = {\n            'OpenStreetMap': 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n            'Stamen Terrain': 'http://{s}.tile.stamen.com/terrain/{z}/{x}/{y}.jpg',\n            'Esri WorldImagery': 'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'\n        }\n        folium.TileLayer(tiles=basemaps.get(basemap, basemaps['OpenStreetMap']), attr=basemap).add_to(self.map)\n\n    def add_layer_control(self):\n        \"\"\"\n        Adds a layer control widget to the folium map for toggling layers.\n        \"\"\"\n        folium.LayerControl().add_to(self.map)\n\n    def add_vector(self, geo_data):\n        \"\"\"\n        Adds vector data (GeoJSON or other formats supported by GeoPandas) to the map.\n\n        Parameters:\n        geo_data (GeoDataFrame or str): A GeoDataFrame or a path to a GeoJSON file.\n        \"\"\"\n        if isinstance(geo_data, gpd.GeoDataFrame):\n            geo_data = geo_data.to_json()\n        folium.GeoJson(geo_data).add_to(self.map)\n\n    def show_map(self):\n        \"\"\"\n        Displays the folium map in the Jupyter notebook or Python script.\n        \"\"\"\n        return self.map\n</code></pre>"},{"location":"foliumap/#GeoBay.foliumap.FoliumMap.__init__","title":"<code>__init__(location, zoom_start=3, **kwargs)</code>","text":"<p>Initializes a folium map centered at a given location with a specified zoom level.</p> <p>Parameters: location (tuple): Latitude and longitude coordinates for the map center. zoom_start (int): The initial zoom level of the map.</p> Source code in <code>GeoBay\\foliumap.py</code> <pre><code>def __init__(self, location, zoom_start=3, **kwargs):\n    \"\"\"\n    Initializes a folium map centered at a given location with a specified zoom level.\n\n    Parameters:\n    location (tuple): Latitude and longitude coordinates for the map center.\n    zoom_start (int): The initial zoom level of the map.\n    \"\"\"\n    self.map = folium.Map(location=location, zoom_start=zoom_start, **kwargs)\n</code></pre>"},{"location":"foliumap/#GeoBay.foliumap.FoliumMap.add_basemap","title":"<code>add_basemap(basemap='OpenStreetMap')</code>","text":"<p>Adds a basemap to the folium map.</p> <p>Parameters: basemap (str): The name of the basemap to add (e.g., 'OpenStreetMap', 'Stamen Terrain', etc.).</p> Source code in <code>GeoBay\\foliumap.py</code> <pre><code>def add_basemap(self, basemap='OpenStreetMap'):\n    \"\"\"\n    Adds a basemap to the folium map.\n\n    Parameters:\n    basemap (str): The name of the basemap to add (e.g., 'OpenStreetMap', 'Stamen Terrain', etc.).\n    \"\"\"\n    basemaps = {\n        'OpenStreetMap': 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n        'Stamen Terrain': 'http://{s}.tile.stamen.com/terrain/{z}/{x}/{y}.jpg',\n        'Esri WorldImagery': 'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'\n    }\n    folium.TileLayer(tiles=basemaps.get(basemap, basemaps['OpenStreetMap']), attr=basemap).add_to(self.map)\n</code></pre>"},{"location":"foliumap/#GeoBay.foliumap.FoliumMap.add_layer_control","title":"<code>add_layer_control()</code>","text":"<p>Adds a layer control widget to the folium map for toggling layers.</p> Source code in <code>GeoBay\\foliumap.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"\n    Adds a layer control widget to the folium map for toggling layers.\n    \"\"\"\n    folium.LayerControl().add_to(self.map)\n</code></pre>"},{"location":"foliumap/#GeoBay.foliumap.FoliumMap.add_vector","title":"<code>add_vector(geo_data)</code>","text":"<p>Adds vector data (GeoJSON or other formats supported by GeoPandas) to the map.</p> <p>Parameters: geo_data (GeoDataFrame or str): A GeoDataFrame or a path to a GeoJSON file.</p> Source code in <code>GeoBay\\foliumap.py</code> <pre><code>def add_vector(self, geo_data):\n    \"\"\"\n    Adds vector data (GeoJSON or other formats supported by GeoPandas) to the map.\n\n    Parameters:\n    geo_data (GeoDataFrame or str): A GeoDataFrame or a path to a GeoJSON file.\n    \"\"\"\n    if isinstance(geo_data, gpd.GeoDataFrame):\n        geo_data = geo_data.to_json()\n    folium.GeoJson(geo_data).add_to(self.map)\n</code></pre>"},{"location":"foliumap/#GeoBay.foliumap.FoliumMap.show_map","title":"<code>show_map()</code>","text":"<p>Displays the folium map in the Jupyter notebook or Python script.</p> Source code in <code>GeoBay\\foliumap.py</code> <pre><code>def show_map(self):\n    \"\"\"\n    Displays the folium map in the Jupyter notebook or Python script.\n    \"\"\"\n    return self.map\n</code></pre>"},{"location":"geobay/","title":"GeoBay module","text":"<p>Main module.</p>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap","title":"<code>CustomIpyleafletMap</code>","text":"<p>               Bases: <code>Map</code></p> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>class CustomIpyleafletMap(IpyleafletMap):\n    def __init__(self, center, zoom=12, **kwargs):\n        # Initialize the map with the center and zoom parameters\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n    def add_basemap(self, basemap_name: str):\n        \"\"\"\n        Adds a basemap to the map.\n\n        Parameters:\n        - basemap_name (str): The name of the basemap, e.g., \"OpenStreetMap\", \n          \"Esri.WorldImagery\", \"OpenTopoMap\".\n\n        Returns:\n        - None\n        \"\"\"\n        basemap_urls = {\n            \"OpenStreetMap\": \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            \"Esri.WorldImagery\": \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n            \"OpenTopoMap\": \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\n        }\n\n        if basemap_name not in basemap_urls:\n            raise ValueError(f\"Basemap '{basemap_name}' is not supported.\")\n\n        basemap = TileLayer(url=basemap_urls[basemap_name])\n        self.add_layer(basemap)\n\n    def add_layer_control(self):\n        \"\"\"\n        Adds a layer control widget to manage layers on the map.\n\n        Returns:\n        - None\n        \"\"\"\n        control = LayersControl()\n        self.add_control(control)\n\n    def add_vector(self, vector_data):\n        \"\"\"\n        Adds vector data to the map. Supports formats that can be read by GeoPandas \n        (GeoJSON, Shapefile, etc.).\n\n        Parameters:\n        - vector_data (str or GeoDataFrame): File path to a vector dataset \n          (Shapefile, GeoJSON) or a GeoPandas GeoDataFrame.\n\n        Returns:\n        - None\n        \"\"\"\n        if isinstance(vector_data, str):\n            gdf = gpd.read_file(vector_data)\n        elif isinstance(vector_data, gpd.GeoDataFrame):\n            gdf = vector_data\n        else:\n            raise ValueError(\"Input must be a file path or a GeoDataFrame.\")\n\n        geo_json_data = gdf.__geo_interface__\n        geo_json_layer = GeoJSON(data=geo_json_data)\n        self.add_layer(geo_json_layer)\n\n    def show_map(self):\n        \"\"\"\n        Displays the ipyleaflet map.\n        \"\"\"\n        return self\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_basemap","title":"<code>add_basemap(basemap_name)</code>","text":"<p>Adds a basemap to the map.</p> <ul> <li>basemap_name (str): The name of the basemap, e.g., \"OpenStreetMap\",    \"Esri.WorldImagery\", \"OpenTopoMap\".</li> </ul> <p>Returns: - None</p> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_basemap(self, basemap_name: str):\n    \"\"\"\n    Adds a basemap to the map.\n\n    Parameters:\n    - basemap_name (str): The name of the basemap, e.g., \"OpenStreetMap\", \n      \"Esri.WorldImagery\", \"OpenTopoMap\".\n\n    Returns:\n    - None\n    \"\"\"\n    basemap_urls = {\n        \"OpenStreetMap\": \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        \"Esri.WorldImagery\": \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n        \"OpenTopoMap\": \"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\n    }\n\n    if basemap_name not in basemap_urls:\n        raise ValueError(f\"Basemap '{basemap_name}' is not supported.\")\n\n    basemap = TileLayer(url=basemap_urls[basemap_name])\n    self.add_layer(basemap)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_layer_control","title":"<code>add_layer_control()</code>","text":"<p>Adds a layer control widget to manage layers on the map.</p> <p>Returns: - None</p> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"\n    Adds a layer control widget to manage layers on the map.\n\n    Returns:\n    - None\n    \"\"\"\n    control = LayersControl()\n    self.add_control(control)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.add_vector","title":"<code>add_vector(vector_data)</code>","text":"<p>Adds vector data to the map. Supports formats that can be read by GeoPandas  (GeoJSON, Shapefile, etc.).</p> <ul> <li>vector_data (str or GeoDataFrame): File path to a vector dataset    (Shapefile, GeoJSON) or a GeoPandas GeoDataFrame.</li> </ul> <p>Returns: - None</p> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def add_vector(self, vector_data):\n    \"\"\"\n    Adds vector data to the map. Supports formats that can be read by GeoPandas \n    (GeoJSON, Shapefile, etc.).\n\n    Parameters:\n    - vector_data (str or GeoDataFrame): File path to a vector dataset \n      (Shapefile, GeoJSON) or a GeoPandas GeoDataFrame.\n\n    Returns:\n    - None\n    \"\"\"\n    if isinstance(vector_data, str):\n        gdf = gpd.read_file(vector_data)\n    elif isinstance(vector_data, gpd.GeoDataFrame):\n        gdf = vector_data\n    else:\n        raise ValueError(\"Input must be a file path or a GeoDataFrame.\")\n\n    geo_json_data = gdf.__geo_interface__\n    geo_json_layer = GeoJSON(data=geo_json_data)\n    self.add_layer(geo_json_layer)\n</code></pre>"},{"location":"geobay/#GeoBay.GeoBay.CustomIpyleafletMap.show_map","title":"<code>show_map()</code>","text":"<p>Displays the ipyleaflet map.</p> Source code in <code>GeoBay\\GeoBay.py</code> <pre><code>def show_map(self):\n    \"\"\"\n    Displays the ipyleaflet map.\n    \"\"\"\n    return self\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install Geobay, run this command in your terminal:</p> <pre><code>pip install geobay\n</code></pre> <p>This is the preferred method to install GeoProject510, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install Geobay from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/Caseyshea96/geobay\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use Geobay in a project:</p> <pre><code>import geobay\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print(\"Hello World!\")\n</pre> print(\"Hello World!\") <pre>Hello World!\n</pre>"}]}